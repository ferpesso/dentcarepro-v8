// @ts-nocheck
/**
 * Helper para an√°lise de imagens usando Google Gemini diretamente
 */

import { GoogleGenerativeAI } from "@google/generative-ai";

export interface AnaliseImagem {
  tipoImagem: string;
  qualidade: string;
  problemasDetectados: string[];
  observacoes: string[];
  recomendacoes: string[];
  nivelUrgencia: "baixo" | "medio" | "alto";
  relatorioCompleto: string;
}

export async function analisarImagemComGemini(dados: {
  imagemBase64: string;
  tipoImagem: string;
  contexto?: string;
}): Promise<AnaliseImagem> {
  console.log("ü§ñ [Gemini] Iniciando an√°lise de imagem...");
  console.log("üìä [Gemini] Tipo:", dados.tipoImagem);
  console.log("üìä [Gemini] Tamanho base64:", dados.imagemBase64.length);

  // Verificar se a chave API est√° configurada
  const apiKey = process.env.GEMINI_API_KEY;
  if (!apiKey) {
    throw new Error("GEMINI_API_KEY n√£o est√° configurada");
  }

  console.log("‚úÖ [Gemini] API Key encontrada");

  // Inicializar o cliente Gemini
  const genAI = new GoogleGenerativeAI(apiKey);
  const model = genAI.getGenerativeModel({ 
    model: "gemini-2.0-flash-exp",
    generationConfig: {
      temperature: 0.4,
      topP: 0.95,
      topK: 40,
      maxOutputTokens: 8192,
      responseMimeType: "application/json",
    },
  });

  console.log("‚úÖ [Gemini] Modelo inicializado");

  const prompt = `Voc√™ √© um especialista em radiologia dent√°ria e an√°lise de imagens odontol√≥gicas. Analise esta imagem dent√°ria em detalhes.

**Tipo de imagem:** ${dados.tipoImagem}
${dados.contexto ? `**Contexto:** ${dados.contexto}` : ""}

Por favor, forne√ßa uma an√°lise completa incluindo:

1. **Identifica√ß√£o do tipo de imagem** (raio-X periapical, panor√¢mica, bite-wing, foto intraoral, etc.)
2. **Avalia√ß√£o da qualidade** da imagem (excelente, boa, regular, ruim)
3. **Problemas detectados** (c√°ries, fraturas, infec√ß√µes, perda √≥ssea, restaura√ß√µes defeituosas, etc.)
4. **Observa√ß√µes gerais** sobre a sa√∫de bucal vis√≠vel
5. **Recomenda√ß√µes** de tratamento ou exames adicionais
6. **N√≠vel de urg√™ncia** (baixo, m√©dio, alto)
7. **Relat√≥rio completo** em formato narrativo

Responda APENAS com um objeto JSON v√°lido (sem markdown, sem \`\`\`json) com as seguintes chaves:
{
  "tipoImagem": "string",
  "qualidade": "string",
  "problemasDetectados": ["string"],
  "observacoes": ["string"],
  "recomendacoes": ["string"],
  "nivelUrgencia": "baixo" | "medio" | "alto",
  "relatorioCompleto": "string (relat√≥rio narrativo completo)"
}

IMPORTANTE: Seja espec√≠fico e t√©cnico, mas tamb√©m claro. Se n√£o conseguir identificar algo com certeza, mencione isso. Sempre indique que esta √© uma an√°lise preliminar e que um profissional deve fazer o diagn√≥stico final.`;

  // Extrair apenas a parte base64 da string (remover prefixo data:image/...)
  let base64Data = dados.imagemBase64;
  if (base64Data.includes(',')) {
    base64Data = base64Data.split(',')[1];
    console.log("üìä [Gemini] Removido prefixo data:image");
  }

  console.log("üöÄ [Gemini] Enviando requisi√ß√£o...");

  try {
    const result = await model.generateContent([
      prompt,
      {
        inlineData: {
          mimeType: "image/jpeg",
          data: base64Data,
        },
      },
    ]);

    console.log("‚úÖ [Gemini] Resposta recebida");

    const response = result.response;
    const text = response.text();
    
    console.log("üìä [Gemini] Tamanho da resposta:", text.length);

    // Parse do JSON
    const analise = JSON.parse(text) as AnaliseImagem;
    
    console.log("‚úÖ [Gemini] JSON parseado com sucesso");
    console.log("üìä [Gemini] Problemas detectados:", analise.problemasDetectados.length);
    console.log("üìä [Gemini] N√≠vel de urg√™ncia:", analise.nivelUrgencia);

    return analise;
  } catch (error) {
    console.error("‚ùå [Gemini] Erro:", error);
    throw error;
  }
}

